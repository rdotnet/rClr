#Define the directory with rClr source
RCLR_SRC_DIR=./src
if [ ! -e ${RCLR_SRC_DIR} ]
then
	echo "error: no suitable package src dir found - last tried ${RCLR_SRC_DIR}"
	CURDIR=`pwd`
	echo "Current directory (pwd) is $CURDIR"
	exit 1
fi

./cleanup.win
WINMAKE_FILE=$RCLR_SRC_DIR/Makefile.win
WINMAKE_INFILE=$WINMAKE_FILE.in
MAKEVARS_FILE=$RCLR_SRC_DIR/Makevars
MAKEVARS_INFILE=$MAKEVARS_FILE.in
RCLR_PROPS_INFILE=$RCLR_SRC_DIR/rClr.props.in
RCLR_PROPS_FILE=$RCLR_SRC_DIR/rClr.props

NOT_FOUND="not found"
# In order to write dos-style paths to the generated Makefile.win and co, needs multiple backslashes...
# R_HOME will be something like f:/path/to/R
# bash has the option of R_HOME_BSLASH=${R_HOME//\//\\\\} and it works as expected
# in ash behavior seems to differ from bash, hence the 8 backslashes needed for the substitution to work
slash_to_eight_bslash() {
	RESULT=`echo $1 | sed -e 's/\//\\\\\\\\/g'`
}

double_backslash() {
	RESULT=`echo $1 | sed -e 's/\\/\\\\/g'`
}

# Give info to the R pkg install log
echo "R_HOME=$R_HOME"
slash_to_eight_bslash "$R_HOME" # quotes essential for spaces in paths
R_HOME_BSLASH=$RESULT

## Update the rClr.props file, so that the build process finds the correct R.dll
sed -e "s/@R_INSTALL_PATH@/$R_HOME_BSLASH/" $RCLR_PROPS_INFILE > $RCLR_PROPS_FILE

VS_COMNTOOLS=${VSCOMMON}
if [ "$VS_COMNTOOLS" = "" ]
then
  VS_COMNTOOLS="C:/Program Files/Microsoft Visual Studio/2022/Community/Common7"
fi

## Detect if a sufficient toolchain is present to compile with visual studio
## Find the location of the MSBuild.exe executable.
GET_MSBUILD_CMD=`echo ${RCLR_SRC_DIR}/get_msbuildpath.cmd | sed -e 's/\//\\\\/g'`
# Do note that this one returns a slashified path already. See get_msbuildpath
MSBUILD_EXE_SLASH=`"$GET_MSBUILD_CMD"`
# MSBUILD_EXE=`${RCLR_SRC_DIR}/get_msbuildpath.cmd`
if [ $MSBUILD_EXE_SLASH != "MSBuild.exe" ]
then
	if [ ! -e $MSBUILD_EXE_SLASH ]
	# if [ "" != "" ]
	then
		echo "error: Msbuild.exe not found at required location ${MSBUILD_TOOLS_PATH}"
		exit 1
	fi
fi # end check on "${MSBUILD_EXE}"

# Check the compiler and dependencies required for buliding on Windows
# Note: == seems not supported in sh (ash??)
if [ ! -d "$VS_COMNTOOLS" ]
then
	echo "error: Cannot locate VSXXXCOMNTOOLS."
	exit 1
else
	# echo $WINMAKE_FILE
	subst="s|@MSBUILD_EXE_PATH@|$MSBUILD_EXE_SLASH|"
	# echo $subst
	sed -e $subst $WINMAKE_INFILE > $WINMAKE_FILE
	#################
	# create the RDll.lib and Mono.lib files for compiling with VC++. Do not assume they are set up (even if very likely for the CRAN winbuilder)
	# Thanks to http://cygwin.com/ml/cygwin/2011-09/msg00232.html for how to call cmd files from sh.
	CREATE_LIB_CMD=`echo ${RCLR_SRC_DIR}/create_lib.cmd | sed -e 's/\//\\\\/g'`
	"$CREATE_LIB_CMD"
fi

exit 0
